Register/Submit/Grade Setup:  Class Master
------------------------------------------

To initialize the grading software, the class master must edit a single  
file and run the initialization program. Complete documentation has been 
installed in the grading directory of the class master account.
 
1. Edit the grading/params file.  

        Configuration information.    This file consists of comments 
	(lines whose first non-blank character is #) and the following
	types of commands.  To continue a command line, end it with
	a backslash.  To include blanks in a value, surround it in
	single quotes. Square brackets below indicate optional parameters.

Defaults have been set except for assign and reader

	+ set VAR VALUE


	  Sets the value of configuration parameter VAR to VALUE.  You 
	  won't really have to use these too often.   The possible
	  values of VAR are

	  - CLASSROOT
		The class master's login.

	  - COURSE
	        The name of the course.

	  - SUPERVISOR
		The login to receive bug reports, reports on readers' 
		progress, etc.

	  - GRADER
		The login to receive submissions.

	  - STAFF_GROUP
		The name of the UNIX group to which instructors belong.

------------ These variables have all been set.

You must edit the assign variable:
---------------------------------
If you know all the assignments and their due dates you will only need to
edit this file once.  If you change information in this file, run the
'init-grading -i' program again.

	+ assign NAME \
		 [ -max MAX ] [ -absolute-max ABSMAX ] [ -weight W ] \
		 [ -partners ] 
		 [ -instructors-only ] [ -no-assigned-readers ] \
		 [ -due DUETIME ] [ -reader-due READERDUE ] \
		 [ -no-submit ] [ -req PATTERN ] ... \
		 [ -category CAT ]

	     Defines an assignment called NAME (e.g., hw1).  MAX is
	     the maximum nominal score on the assignment; ABSMAX is
	     the absolute maximum a reader may assign (if larger); W
	     is the multiplicative weight factor (default 1); DUETIME
	     is the date and time the assignment is due, in the form
		  mm/dd/yyyy:HH:MM    
	     or
		  mm/dd/yyyy    (same as mm/dd/yyyy:23:59);
	     READERDUE is the time the readers are supposed to return
	     the grades (i.e., the time to start reminding them); 
	     CAT is a category---an arbitrary keyword used only for
	     grade extrapolation in glookup.   Specify -partners for
	     partnership assignments.  Specify -no-submit if there are
	     no electronic submissions for this assignment (e.g., tests,
	     or handwritten homework).  Otherwise, you may specify
	     any number of -req options giving the names of files
	     that MUST be submitted (these are Perl regular
	     expressions).  Specify -instructors-only if ordinary
	     readers do not grade the assignment (e.g., tests), and
	     -no-assigned-readers if the software is not to check that
	     readers grade specific logins.
Example:
assign hw1 -max 5 -weight 0.4 -category HW \
           -due 01/05/1999 -req hw1.c

assign hw2 -max 5 -weight 0.4 -category HW \
           -due 01/06/1999 -req hw2.c

assign proj1 -max 20 -weight 1.0 -category PROJ -due 01/08/1999 -reader-due 01/0
9/1999 \
             -req p1.c -req README

assign test1 -max 25 -instructors-only -no-assigned-readers -weight 1.0 -categor
y TEST \
             -no-submit -due 01/06/1999

assign final -max 50 -instructors-only -no-assigned-readers -weight 1.0 -categor
y TEST \
             -no-submit -due 01/08/1999


You must edit the reader variables.
-----------------------------------
	+ reader LOGIN [ -instructor ] [ -no-remind ] \
		 [ -grade ASSIGN_PATTERN LOGIN_PATTERN ] ...

	     Declares that LOGIN is a reader.   Use -instructor to
	     indicate an instructor.  Use -no-remind to indicate that
	     this reader is not to be sent reminders about homework
	     that still needs grading.  You may specify any number of
	     -grade options, giving pairs of patterns---one to match
	     assignment names (must match the entire name) and one to 
	     match logins (likewise entire).  These indicate what
	     logins this reader is responsible for what assignments.
	     If you want to dispense entirely with reminders, just
	     declare everyone 
		-no-remind -grade .* .*
Example:

# Put 'reader' commands here

# The auto-grader.  Not responsible for anything.
reader cs123-ra   -grade NONE NONE

reader cs123-rb   -grade '.*' 'cs123-a[a-c]'

reader cs123-rc   -grade '.*' 'cs123-a[d-f]'

reader cs123-rd   -grade '.*' 'cs123-a[g-j]'

reader cs123    -instructor -no-remind
reader cs123-ta -instructor -no-remind
reader cs123-tb -instructor -no-remind

This is optional.
-----------------
   	+ gradescale [ -throw-out-lowest N CATEGORY ] ... \
		     SCORE LETTERGRADE ...
   
	     Defines the grading scale.  Put this after all 'assign' 
	     commands.  The 'throw-out-lowest' options specify that the
	     lowest N grades in the given CATEGORY are to be discarded 
	     (be sure to adjust your grading scale accordingly).  Each
	     SCORE LETTERGRADE pair gives a minimal score in the category and
	     the associated letter grade.  The 'assign-letter-grades'
	     command uses this information (it does NOT round grades; to get
	     that effect, fudge the numbers you enter here).
Example:
gradescale -throw-out-lowest 1 HW \
           0 F 10 D- 20 D 30 D+ 40 C- 50 C 60 C+ 70 B- 75 B 80 B+ 85 A-  \
           90 A 95  A+

If you run tests on the submissions, define these variables.  These are
optional:
-----------------------------------------------------------------------

$DIR/testing/mk/ASSIGN.mk
	     A makefile whose default target compiles and tests the
	     files in the current directory for assignment ASSIGN.
	     The additional target OK, if supplied, should print a message 
	     to send to successful submitters, and NOT-OK should print
	     a message for everyone else.  

$DIR/pretest/ASSGN
	     An arbitrary executable script or program that, when run,
	     tests a copy of a submission of assignment ASSGN in the 
	     current (temporary) directory and exits with 0 for OK,
	     and 1 for not OK.  The 'submit' program pretests only
	     if this file is present.

2.  After the file has been edited, run 'init-grading -i'.  Run 'init-grading -i'
every time information in the file is edited.
