
# Execute with GNU make.

PRIVATE = no

SOURCE_DIR = @SOURCE_DIR@
EXEC_DIRS = "$(GRADINGDIR)/suid:@SUIDDIR@"

OWNER =
MASTERDIR := $(strip $(shell bash -c 'echo ~$(OWNER)'))
GRADINGDIR = $(MASTERDIR)/grading
PROGRAM_NAME = run-as-$(OWNER)

ENVIRON = "PATH=/usr/bin", "MASTERDIR=$(MASTERDIR)", "GRADINGDIR=$(GRADINGDIR)"

CC = gcc

CFLAGS = -Wall

help:
	@echo "Build and install run-as-class-master program with GNU make:"
	@echo "   make OWNER=<class master login> \\"
	@echo "        DIR=<install directory> \\"
	@echo "        [PROGRAM_NAME=<base name of program>] \\"
	@echo "        [GRADINGDIR=<class grading directory>] \\"
	@echo "        [MASTERDIR=<class master directory>] \\"
	@echo "        [PRIVATE=yes] \\"
	@echo "      install"
	@echo "where MASTERDIR and DIR are existing directories."
	@echo "OWNER should be the CLASSROOT parameter in params."
	@echo "MASTERDIR defaults to ~OWNER; GRADINGDIR to MASTERDIR/grading."
	@echo "PROGRAM_NAME is the name of the wrapper program; default is"
	@echo "run-as-<class master login>."
	@echo "Only root or (possibly) the class master account can install."
	@echo "With PRIVATE=yes, does not set UID to OWNER, and honors"
	@echo "settings of MASTERDIR and GRADINGDIR.  This is for flexibility"
	@echo "on a private account that operates on a mirror of the class"
	@echo "account."

install:
	@if [ "X$(MASTERDIR)" = "X" -o ! -d "$(MASTERDIR)" \
	      -o "X$(OWNER)" = "X" \
	      -o "X$(DIR)" = "X" ]; then \
	    $(MAKE) help; \
            exit 1; \
	fi
	if [ ! -d $(DIR) ]; then mkdir -p $(DIR); fi
	rm -f $(DIR)/run-as-$(OWNER)
	$(CC) $(CFLAGS) -o $(DIR)/$(PROGRAM_NAME) \
            -DEXEC_DIRS='$(EXEC_DIRS)' -DENVIRON='$(ENVIRON)' \
	    -DPRIVATE=$(PRIVATE) \
	    $(SOURCE_DIR)/run-as-class-master/run-as-class-master.c
	chown $(OWNER) $(DIR)/$(PROGRAM_NAME)
ifeq ($(PRIVATE),no)
	chmod go=x,u+s $(DIR)/$(PROGRAM_NAME)
endif
	@echo "Installed $(PROGRAM_NAME) in $(DIR)."
	@echo 'Parameters: EXEC_DIRS = $(EXEC_DIRS)'
	@echo '            ENVIRON = $(ENVIRON)'
	@echo '            PRIVATE = $(PRIVATE)'

clean: 
	rm -f *~ *.o $(PROGRAM_NAME)
